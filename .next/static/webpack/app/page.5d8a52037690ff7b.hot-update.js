"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/utils/utilities.ts":
/*!********************************!*\
  !*** ./src/utils/utilities.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CABINET_SIZE_CONSTRAINTS: function() { return /* binding */ CABINET_SIZE_CONSTRAINTS; },\n/* harmony export */   CELL_SIZE: function() { return /* binding */ CELL_SIZE; },\n/* harmony export */   ECabinetFinishes: function() { return /* binding */ ECabinetFinishes; },\n/* harmony export */   ECabinetHandles: function() { return /* binding */ ECabinetHandles; },\n/* harmony export */   ECabinetLegs: function() { return /* binding */ ECabinetLegs; },\n/* harmony export */   ECabinetStyle: function() { return /* binding */ ECabinetStyle; },\n/* harmony export */   EDGE_GAP: function() { return /* binding */ EDGE_GAP; },\n/* harmony export */   EOcclusionImages: function() { return /* binding */ EOcclusionImages; },\n/* harmony export */   EPlywoodTextures: function() { return /* binding */ EPlywoodTextures; },\n/* harmony export */   EVeneerTextures: function() { return /* binding */ EVeneerTextures; },\n/* harmony export */   LEG_DEPTH: function() { return /* binding */ LEG_DEPTH; },\n/* harmony export */   LEG_HEIGHT: function() { return /* binding */ LEG_HEIGHT; },\n/* harmony export */   LEG_WIDTH: function() { return /* binding */ LEG_WIDTH; },\n/* harmony export */   PLATE_THICKNESS: function() { return /* binding */ PLATE_THICKNESS; },\n/* harmony export */   ambientLightColor: function() { return /* binding */ ambientLightColor; },\n/* harmony export */   applyRandomLayoutsToColumns: function() { return /* binding */ applyRandomLayoutsToColumns; },\n/* harmony export */   backOcclusionTexturePath: function() { return /* binding */ backOcclusionTexturePath; },\n/* harmony export */   createColumnWithLayout: function() { return /* binding */ createColumnWithLayout; },\n/* harmony export */   directionalLightColor: function() { return /* binding */ directionalLightColor; },\n/* harmony export */   environmentPath: function() { return /* binding */ environmentPath; },\n/* harmony export */   floorColor: function() { return /* binding */ floorColor; },\n/* harmony export */   getBottomHeight: function() { return /* binding */ getBottomHeight; },\n/* harmony export */   getCalculatedColumns: function() { return /* binding */ getCalculatedColumns; },\n/* harmony export */   getCellHeight: function() { return /* binding */ getCellHeight; },\n/* harmony export */   getCellWidth: function() { return /* binding */ getCellWidth; },\n/* harmony export */   getColumnCount: function() { return /* binding */ getColumnCount; },\n/* harmony export */   getColumnVerticalLayout: function() { return /* binding */ getColumnVerticalLayout; },\n/* harmony export */   getDistance: function() { return /* binding */ getDistance; },\n/* harmony export */   getId: function() { return /* binding */ getId; },\n/* harmony export */   getIndividualColumn: function() { return /* binding */ getIndividualColumn; },\n/* harmony export */   getLayoutImages: function() { return /* binding */ getLayoutImages; },\n/* harmony export */   getPartitonPlates: function() { return /* binding */ getPartitonPlates; },\n/* harmony export */   getRemainingColumns: function() { return /* binding */ getRemainingColumns; },\n/* harmony export */   getRowCount: function() { return /* binding */ getRowCount; },\n/* harmony export */   getWidthArray: function() { return /* binding */ getWidthArray; },\n/* harmony export */   handleAModelPath: function() { return /* binding */ handleAModelPath; },\n/* harmony export */   handleBModelPath: function() { return /* binding */ handleBModelPath; },\n/* harmony export */   horizontalOcclusionTexturePath: function() { return /* binding */ horizontalOcclusionTexturePath; },\n/* harmony export */   iconifyIcons: function() { return /* binding */ iconifyIcons; },\n/* harmony export */   legsModelPath: function() { return /* binding */ legsModelPath; },\n/* harmony export */   menuIconPaths: function() { return /* binding */ menuIconPaths; },\n/* harmony export */   noLegsModelPath: function() { return /* binding */ noLegsModelPath; },\n/* harmony export */   plywoodTextures: function() { return /* binding */ plywoodTextures; },\n/* harmony export */   shadowManModelPath: function() { return /* binding */ shadowManModelPath; },\n/* harmony export */   tvModelPath: function() { return /* binding */ tvModelPath; },\n/* harmony export */   veneerTextures: function() { return /* binding */ veneerTextures; },\n/* harmony export */   verticalOcclusionTexturePath: function() { return /* binding */ verticalOcclusionTexturePath; },\n/* harmony export */   wallColor: function() { return /* binding */ wallColor; }\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three */ \"(app-pages-browser)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _columnLayoutOptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./columnLayoutOptions */ \"(app-pages-browser)/./src/utils/columnLayoutOptions.ts\");\n\n\n//--- CONSTANTS\n// Dimensions\nconst PLATE_THICKNESS = 0.02;\nconst CELL_SIZE = {\n    maxWidth: 0.60,\n    minWidth: 0.25,\n    maxHeight: 0.35,\n    minHeight: 0.15\n};\nconst LEG_HEIGHT = 0.18;\nconst LEG_WIDTH = 0.05;\nconst LEG_DEPTH = 0.05;\nconst EDGE_GAP = 0.006;\n// Colors\nconst wallColor = \"#e7e7e7\";\nconst floorColor = \"#b7b7b7\";\nconst ambientLightColor = \"#f0f0f0\";\nconst directionalLightColor = \"#f0f0f0\";\n// Texture paths\nconst texturesRootPath = \"/assets/textures/\";\nconst environmentPath = texturesRootPath + \"environment.hdr\";\nconst plywoodRootPath = texturesRootPath + \"plywood_1k/textures/\";\nconst plywoodAoMapPath = plywoodRootPath + \"plywood_ao_1k.jpg\";\nconst plywoodNormalMapPath = plywoodRootPath + \"plywood_nor_gl_1k.jpg\";\nconst plywoodRoughnessMapPath = plywoodRootPath + \"plywood_rough_1k.jpg\";\nconst plywoodTextures = {\n    aoMap: plywoodAoMapPath,\n    normalMap: plywoodNormalMapPath,\n    roughnessMap: plywoodRoughnessMapPath\n};\n// Base Textures Veener\nconst woodRootPath = texturesRootPath + \"wood_27/\";\nconst veneerAoMapPath = woodRootPath + \"ambient-occlusion.jpg\";\nconst veneerNormalMapPath = woodRootPath + \"normal.jpg\";\nconst veneerRoughnessMapPath = woodRootPath + \"roughness.jpg\";\nconst veneerTextures = {\n    aoMap: veneerAoMapPath,\n    normalMap: veneerNormalMapPath,\n    roughnessMap: veneerRoughnessMapPath\n};\nvar EVeneerTextures;\n(function(EVeneerTextures) {\n    EVeneerTextures[EVeneerTextures[\"BEIGE_GREY_LORENZO_OAK\"] = texturesRootPath + \"veneer-oak-wood/beige_grey_lorenzo_oak.jpg\"] = \"BEIGE_GREY_LORENZO_OAK\";\n    // BEIGE_TEXTILE = texturesRootPath + 'veneer-oak-wood/beige_textile.jpg',\n    EVeneerTextures[EVeneerTextures[\"BROWN_ABANO_ASH\"] = texturesRootPath + \"veneer-oak-wood/brown_abano_ash.jpg\"] = \"BROWN_ABANO_ASH\";\n    EVeneerTextures[EVeneerTextures[\"BROWN_HALIFAX_OAK\"] = texturesRootPath + \"veneer-oak-wood/brown_halifax_oak.jpg\"] = \"BROWN_HALIFAX_OAK\";\n    EVeneerTextures[EVeneerTextures[\"BROWN_TONNSBERG_OAK\"] = texturesRootPath + \"veneer-oak-wood/brown_tonnsberg_oak.jpg\"] = \"BROWN_TONNSBERG_OAK\";\n    EVeneerTextures[EVeneerTextures[\"BROWN_WARMIA_WALLNUT\"] = texturesRootPath + \"veneer-oak-wood/brown_warmia_wallnut.jpg\"] = \"BROWN_WARMIA_WALLNUT\";\n    EVeneerTextures[EVeneerTextures[\"LIGHT_BARONIA_OAK\"] = texturesRootPath + \"veneer-oak-wood/light_baronia_oak.jpg\"] = \"LIGHT_BARONIA_OAK\";\n    EVeneerTextures[EVeneerTextures[\"LIGHT_NATURAL_DAVENPORT_OAK\"] = texturesRootPath + \"veneer-oak-wood/Light_Natural_Davenport_oak.jpg\"] = \"LIGHT_NATURAL_DAVENPORT_OAK\";\n    EVeneerTextures[EVeneerTextures[\"NATURAL_CASELLA_OAK\"] = texturesRootPath + \"veneer-oak-wood/natural_casella_oak.jpg\"] = \"NATURAL_CASELLA_OAK\";\n    EVeneerTextures[EVeneerTextures[\"PARONA_WALLNUT\"] = texturesRootPath + \"veneer-oak-wood/parona_wallnut.jpg\"] = \"PARONA_WALLNUT\";\n    EVeneerTextures[EVeneerTextures[\"SEVILLA_ASH\"] = texturesRootPath + \"veneer-oak-wood/sevilla_ash.jpg\"] = \"SEVILLA_ASH\";\n    EVeneerTextures[EVeneerTextures[\"VICENZA_OAK\"] = texturesRootPath + \"veneer-oak-wood/vicenza_oak.jpg\"] = \"VICENZA_OAK\";\n    EVeneerTextures[EVeneerTextures[\"VICENZA_OAK_2\"] = texturesRootPath + \"veneer-oak-wood/vicenza_oak2.jpg\"] = \"VICENZA_OAK_2\";\n})(EVeneerTextures || (EVeneerTextures = {}));\nvar EPlywoodTextures;\n(function(EPlywoodTextures) {\n    EPlywoodTextures[EPlywoodTextures[\"BRONZE_BRUSHED_METAL\"] = texturesRootPath + \"plywood-colors/bronze_brushed_metal.jpg\"] = \"BRONZE_BRUSHED_METAL\";\n    EPlywoodTextures[EPlywoodTextures[\"ALMOND_BEIGE\"] = texturesRootPath + \"plywood-colors/almond_beige.jpg\"] = \"ALMOND_BEIGE\";\n    EPlywoodTextures[EPlywoodTextures[\"CARAT_BEIGE\"] = texturesRootPath + \"plywood-colors/carat_beige.jpg\"] = \"CARAT_BEIGE\";\n    EPlywoodTextures[EPlywoodTextures[\"CASHMERE_GREY\"] = texturesRootPath + \"plywood-colors/cashmere_grey.jpg\"] = \"CASHMERE_GREY\";\n    EPlywoodTextures[EPlywoodTextures[\"CORA_BRONZE\"] = texturesRootPath + \"plywood-colors/cobra_bronze.jpg\"] = \"CORA_BRONZE\";\n    EPlywoodTextures[EPlywoodTextures[\"CUBANITE_GREY\"] = texturesRootPath + \"plywood-colors/cubanite_grey.jpg\"] = \"CUBANITE_GREY\";\n    EPlywoodTextures[EPlywoodTextures[\"FIR_GREEN\"] = texturesRootPath + \"plywood-colors/fir_green.jpg\"] = \"FIR_GREEN\";\n    EPlywoodTextures[EPlywoodTextures[\"FJORD_GREEN\"] = texturesRootPath + \"plywood-colors/fjord_green.jpg\"] = \"FJORD_GREEN\";\n    EPlywoodTextures[EPlywoodTextures[\"GRAPHITE_GREY\"] = texturesRootPath + \"plywood-colors/graphite_grey.jpg\"] = \"GRAPHITE_GREY\";\n    EPlywoodTextures[EPlywoodTextures[\"INDIGO_BLUE\"] = texturesRootPath + \"plywood-colors/indigo_blue.jpg\"] = \"INDIGO_BLUE\";\n    EPlywoodTextures[EPlywoodTextures[\"REED_GREEN\"] = texturesRootPath + \"plywood-colors/reed_green.jpg\"] = \"REED_GREEN\";\n    EPlywoodTextures[EPlywoodTextures[\"SAGE_GREEN\"] = texturesRootPath + \"plywood-colors/sage_green.jpg\"] = \"SAGE_GREEN\";\n    EPlywoodTextures[EPlywoodTextures[\"STONE_GREEN\"] = texturesRootPath + \"plywood-colors/stone_green.jpg\"] = \"STONE_GREEN\";\n    EPlywoodTextures[EPlywoodTextures[\"TAUPE_GREY\"] = texturesRootPath + \"plywood-colors/taupe_grey.jpg\"] = \"TAUPE_GREY\";\n    EPlywoodTextures[EPlywoodTextures[\"TRUFFLE_BROWN\"] = texturesRootPath + \"plywood-colors/truffle_brown.jpg\"] = \"TRUFFLE_BROWN\";\n    EPlywoodTextures[EPlywoodTextures[\"U999_PM_BLACK\"] = texturesRootPath + \"plywood-colors/U999_PM_Black.jpg\"] = \"U999_PM_BLACK\";\n})(EPlywoodTextures || (EPlywoodTextures = {}));\n// Occlusion Textures\nconst horizontalOcclusionTexturePath = texturesRootPath + \"horizontal-panel.jpg\";\nconst verticalOcclusionTexturePath = texturesRootPath + \"vertical-panel.jpg\";\nconst backOcclusionTexturePath = texturesRootPath + \"back-panel.jpg\";\nvar EOcclusionImages;\n(function(EOcclusionImages) {\n    EOcclusionImages[EOcclusionImages[\"HORIZONTAL\"] = horizontalOcclusionTexturePath] = \"HORIZONTAL\";\n    EOcclusionImages[EOcclusionImages[\"BACK\"] = verticalOcclusionTexturePath] = \"BACK\";\n    EOcclusionImages[EOcclusionImages[\"VERTICAL\"] = backOcclusionTexturePath] = \"VERTICAL\";\n})(EOcclusionImages || (EOcclusionImages = {}));\n// Layout Icons\nconst layoutIconRootPath = \"/assets/icons/on-model-editor/\";\nconst iconifyIcons = {\n    layoutIcons: {\n        undoIcon: \"solar:undo-left-round-outline\",\n        dimensionsIcon: \"solar:ruler-linear\",\n        doorsIcon: \"fluent:door-20-regular\",\n        alignColumnsIcon: \"flowbite:grid-plus-outline\",\n        showDecorationsIcon: \"hugeicons:paint-brush-02\",\n        assemblyIcon: \"carbon:3d-cursor\"\n    },\n    menuIcons: {\n        arrowUp: \"iwwa:arrow-up\",\n        arrowDown: \"iwwa:arrow-down\",\n        infoQuestion: \"ph:question-bold\"\n    },\n    sceneIcons: {\n        editLayout: \"ic-outline-create\"\n    }\n};\nconst menuIconPaths = {\n    legs: {\n        no_leg: \"/assets/icons/menu-icons/legs/no_leg.svg\",\n        legs: \"/assets/icons/menu-icons/legs/legs.svg\",\n        floating: \"/assets/icons/menu-icons/legs/floating.svg\"\n    },\n    handles: {\n        handle_a: \"/assets/icons/menu-icons/handles/handle_A.svg\",\n        handle_b: \"/assets/icons/menu-icons/handles/handle_B.svg\",\n        push: \"/assets/icons/menu-icons/handles/push.svg\"\n    },\n    styles: {\n        frame: \"/assets/icons/menu-icons/styles/frame.svg\",\n        gradient: \"/assets/icons/menu-icons/styles/gradient.svg\",\n        grid: \"/assets/icons/menu-icons/styles/grid.svg\",\n        mosaic: \"/assets/icons/menu-icons/styles/mosaic.svg\",\n        pixel: \"/assets/icons/menu-icons/styles/pixel.svg\",\n        slant: \"/assets/icons/menu-icons/styles/slant.svg\"\n    }\n};\nconst generateLayoutIcons = (layoutHeight, iconCount)=>{\n    const layoutRootPath = \"\".concat(layoutIconRootPath).concat(layoutHeight, \"/\");\n    return Array.from({\n        length: iconCount\n    }, (_, i)=>\"\".concat(layoutRootPath).concat(i + 1, \".svg\"));\n};\n// Generating icon paths for each layout\nconst layout53Icons = generateLayoutIcons(53, 3);\nconst layout63Icons = generateLayoutIcons(63, 6);\nconst layout73Icons = generateLayoutIcons(73, 7);\nconst layout93Icons = generateLayoutIcons(93, 8);\nconst layout103Icons = generateLayoutIcons(103, 8);\nconst layout123Icons = generateLayoutIcons(123, 8);\nconst layout133Icons = generateLayoutIcons(133, 6); // Adjusted for 6 icons only\nconst layout143Icons = generateLayoutIcons(143, 6);\n// Model Paths\nconst modelsRootPath = \"/assets/models/\";\nconst shadowManModelPath = modelsRootPath + \"shadow_man.glb\";\nconst handleAModelPath = modelsRootPath + \"handle_A.glb\";\nconst handleBModelPath = modelsRootPath + \"handle_B.glb\";\nconst legsModelPath = modelsRootPath + \"legs.glb\";\nconst noLegsModelPath = modelsRootPath + \"no_legs.glb\";\nconst tvModelPath = modelsRootPath + \"tv.glb\";\nvar ECabinetStyle;\n(function(ECabinetStyle) {\n    ECabinetStyle[\"GRID\"] = \"grid\";\n    ECabinetStyle[\"GRADIENT\"] = \"gradient\";\n    ECabinetStyle[\"MOSAIC\"] = \"mosaic\";\n    ECabinetStyle[\"FRAME\"] = \"frame\";\n    ECabinetStyle[\"SLANT\"] = \"slant\";\n    ECabinetStyle[\"PIXEL\"] = \"pixel\";\n    ECabinetStyle[\"MODERN\"] = \"modern\";\n    ECabinetStyle[\"CLASSIC\"] = \"classic\";\n})(ECabinetStyle || (ECabinetStyle = {}));\nvar ECabinetLegs;\n(function(ECabinetLegs) {\n    ECabinetLegs[\"LEGS\"] = \"LEGS\";\n    ECabinetLegs[\"NO_LEG\"] = \"NO_LEG\";\n    ECabinetLegs[\"FLOATING\"] = \"FLOATING\";\n})(ECabinetLegs || (ECabinetLegs = {}));\nvar ECabinetHandles;\n(function(ECabinetHandles) {\n    ECabinetHandles[\"HANDLE_A\"] = \"HANDLE_A\";\n    ECabinetHandles[\"HANDLE_B\"] = \"HANDLE_B\";\n    ECabinetHandles[\"PUSH\"] = \"PUSH\";\n})(ECabinetHandles || (ECabinetHandles = {}));\nvar ECabinetFinishes;\n(function(ECabinetFinishes) {\n    ECabinetFinishes[\"PLYWOOD\"] = \"Plywood\";\n    ECabinetFinishes[\"VENEER\"] = \"Veneer\";\n})(ECabinetFinishes || (ECabinetFinishes = {}));\n// Functions\n// Get the array of remaining columns widths\nconst getWidthArray = (style, totalWidth)=>{\n    let widthArray = [];\n    const unit = 100;\n    switch(style){\n        case \"grid\":\n            if (totalWidth < CELL_SIZE.maxWidth * unit) {\n                widthArray = [\n                    totalWidth - 2 * PLATE_THICKNESS * unit\n                ];\n            } else if (totalWidth < 112) {\n                widthArray = getRemainingColumns(totalWidth - 3 * PLATE_THICKNESS * unit);\n            } else if (totalWidth < 154) {\n                widthArray = [\n                    44\n                ];\n            } else if (totalWidth < 197) {\n                widthArray = [\n                    44,\n                    38\n                ];\n            } else if (totalWidth < 243) {\n                widthArray = [\n                    44,\n                    38,\n                    44\n                ];\n            } else if (totalWidth < 282) {\n                widthArray = [\n                    44,\n                    38,\n                    44,\n                    37\n                ];\n            } else if (totalWidth < 327) {\n                widthArray = [\n                    44,\n                    38,\n                    44,\n                    37,\n                    43\n                ];\n            } else if (totalWidth < 372) {\n                widthArray = [\n                    44,\n                    38,\n                    44,\n                    37,\n                    43,\n                    43\n                ];\n            } else if (totalWidth < 412) {\n                widthArray = [\n                    44,\n                    38,\n                    44,\n                    37,\n                    43,\n                    43,\n                    38\n                ];\n            } else {\n                widthArray = [\n                    44,\n                    38,\n                    44,\n                    37,\n                    43,\n                    43,\n                    38,\n                    44\n                ];\n            }\n            break;\n        default:\n            break;\n    }\n    return widthArray;\n};\n// Get the vertical layout of a column for a given cabinet height\nconst getColumnVerticalLayout = (param)=>{\n    let { cabinetHeight } = param;\n    const currentlayout = [];\n    const numberOfRows = getRowCount({\n        cabinetHeight\n    });\n    for(let i = 0; i < numberOfRows; i++){\n        currentlayout.push({\n            index: i,\n            height: getCellHeight(numberOfRows, cabinetHeight)\n        });\n    }\n    return currentlayout;\n};\n// Get the distance between two Vector3s\nfunction getDistance(p1, p2) {\n    // return the square root of the sum of the squares of the differences of the x and z coordinates\n    return Math.sqrt((p2.x - p1.x) ** 2 + (p2.z - p1.z) ** 2);\n}\n// Get the count of rows for a given cabinet height\nfunction getRowCount(param) {\n    let { cabinetHeight } = param;\n    // Get the maximum height of a cell\n    const maxHeight = CELL_SIZE.maxHeight;\n    // Return the number of rows\n    return Math.floor((cabinetHeight - PLATE_THICKNESS) / (maxHeight + PLATE_THICKNESS)) + 1;\n}\n// Get the number of columns and the width of a cell for a given total width\nfunction getColumnCount(param) {\n    let { totalWidth } = param;\n    // Get the maximum width of a cell\n    const maxWidth = CELL_SIZE.maxWidth;\n    // Get the number of columns according to the total width\n    const numberOfColumns = Math.floor((totalWidth - PLATE_THICKNESS) / (maxWidth + PLATE_THICKNESS)) + 1;\n    // Get the total width of cells without\n    const sum = totalWidth - (numberOfColumns + 1) * PLATE_THICKNESS;\n    // Round to 2 decimal places\n    const widthOfCell = Math.round(sum / numberOfColumns * 100) / 100;\n    return {\n        numberOfColumns,\n        widthOfCell\n    };\n}\n// Get the height of a cell for a given number of rows and a cabinet height\nfunction getCellHeight(rowCount, cabinetHeight) {\n    // Get the height of a cell\n    const cellHeight = (cabinetHeight - (rowCount - 1) * PLATE_THICKNESS) / rowCount;\n    return cellHeight;\n}\n// Get the width of a cell for a given number of columns and a total width\nfunction getCellWidth(columnCount, totalWidth) {\n    // Get the width of a cell\n    const cellWidth = (totalWidth - (columnCount + 1) * PLATE_THICKNESS) / columnCount;\n    return cellWidth;\n}\nfunction getBottomHeight(legs) {\n    return legs === \"NO_LEG\" ? 0.02 : LEG_HEIGHT;\n}\nfunction getPartitonPlates(param) {\n    let { columns, totalHeight, totalWidth, totalDepth, legHeight } = param;\n    const verticals = [];\n    const horizontals = [];\n    const availableSpaces = [];\n    const backsides = [];\n    const spaceHeight = totalHeight - 2 * PLATE_THICKNESS - legHeight;\n    const posY = (totalHeight + legHeight) / 2;\n    const startPosX = -(totalWidth - PLATE_THICKNESS) / 2;\n    const bottomPosY = legHeight + PLATE_THICKNESS / 2;\n    verticals.push({\n        row: 0,\n        col: -1,\n        position: {\n            x: startPosX,\n            y: posY,\n            z: 0\n        },\n        scale: {\n            width: spaceHeight,\n            depth: totalDepth\n        }\n    });\n    for(let col = 0; col < columns.length; col++){\n        const column = columns[col];\n        const rows = column.rows;\n        let sum = 0;\n        for(let i = 0; i < col + 1; i++){\n            sum += columns[i].width;\n        }\n        const posX = startPosX + sum + (col + 1) * PLATE_THICKNESS;\n        const spacePosX = posX - PLATE_THICKNESS / 2 - column.width / 2;\n        verticals.push({\n            row: 0,\n            col,\n            position: {\n                x: posX,\n                y: posY,\n                z: 0\n            },\n            scale: {\n                width: spaceHeight,\n                depth: totalDepth\n            }\n        });\n        availableSpaces.push({\n            row: 0,\n            col,\n            position: {\n                x: spacePosX,\n                y: posY,\n                z: totalDepth / 2\n            },\n            scale: {\n                width: column.width,\n                depth: spaceHeight\n            }\n        });\n        for(let rowIndex = 0; rowIndex < rows.length; rowIndex++){\n            let verticalSum = 0;\n            for(let p = 0; p < rowIndex + 1; p++){\n                verticalSum += rows[rowIndex].height;\n            }\n            const middlePosY = bottomPosY + verticalSum + (rowIndex + 1) * PLATE_THICKNESS;\n            const backPosY = middlePosY - PLATE_THICKNESS / 2 - rows[rowIndex].height / 2;\n            const backPosZ = -(totalDepth - PLATE_THICKNESS) / 2;\n            if (rowIndex < rows.length - 1) {\n                horizontals.push({\n                    row: rowIndex,\n                    col,\n                    position: {\n                        x: spacePosX,\n                        y: middlePosY,\n                        z: 0\n                    },\n                    scale: {\n                        width: column.width,\n                        depth: totalDepth - EDGE_GAP\n                    }\n                });\n            }\n            backsides.push({\n                row: rowIndex,\n                col,\n                position: {\n                    x: spacePosX,\n                    y: backPosY,\n                    z: backPosZ\n                },\n                scale: {\n                    width: column.width,\n                    depth: rows[rowIndex].height\n                }\n            });\n        }\n    }\n    return {\n        verticals,\n        availableSpaces,\n        horizontals,\n        backsides\n    };\n}\n// Fix the function signature\nconst getCalculatedColumns = (param)=>{\n    let { current, cabinetSize, cabinetStyle, legHeight, columnCount } = param;\n    const { totalWidth, totalHeight } = cabinetSize;\n    // Calculate available width (total width minus side plates)\n    const availableWidth = totalWidth - 2 * PLATE_THICKNESS;\n    // Determine how many columns can fit\n    let numColumns;\n    if (columnCount) {\n        numColumns = columnCount;\n    } else {\n        // Calculate based on minimum column width\n        numColumns = Math.floor(availableWidth / (CELL_SIZE.minWidth + PLATE_THICKNESS));\n        // Ensure at least one column\n        numColumns = Math.max(1, numColumns);\n    }\n    // Calculate column width\n    const columnWidth = (availableWidth - (numColumns - 1) * PLATE_THICKNESS) / numColumns;\n    // Create columns array\n    const columns = [];\n    // Generate each column\n    for(let i = 0; i < numColumns; i++){\n        // Calculate position\n        const posX = -totalWidth / 2 + PLATE_THICKNESS + i * (columnWidth + PLATE_THICKNESS) + columnWidth / 2;\n        // Create column with appropriate layout\n        const column = createColumnWithLayout(columnWidth, posX, totalHeight, legHeight, cabinetStyle);\n        columns.push(column);\n    }\n    return columns;\n};\nfunction getRemainingColumns(remainingWidth) {\n    const b = remainingWidth % 2 === 0 ? remainingWidth / 2 : (remainingWidth + 1) / 2;\n    const c = remainingWidth - b;\n    return [\n        b,\n        c\n    ];\n}\nfunction getIndividualColumn(param) {\n    let { targetIndex, columns, totalWidth, totalDepth, legHeight } = param;\n    const column = columns[targetIndex];\n    const startPosX = -(totalWidth - PLATE_THICKNESS) / 2;\n    const bottomPosY = legHeight + PLATE_THICKNESS / 2;\n    const rowsPos = [];\n    const delta = 0.02;\n    const rows = column.rows;\n    let sum = 0;\n    for(let i = 0; i < targetIndex + 1; i++){\n        sum += columns[i].width;\n    }\n    const posX = startPosX + sum + (targetIndex + 1) * PLATE_THICKNESS;\n    const spacePosX = posX - PLATE_THICKNESS / 2 - column.width / 2;\n    for(let i = 0; i < rows.length; i++){\n        let verticalSum = 0;\n        for(let p = 0; p < i + 1; p++){\n            verticalSum += rows[p].height;\n        }\n        const middlePosY = bottomPosY + verticalSum + (i + 1) * PLATE_THICKNESS;\n        const backPosY = middlePosY - PLATE_THICKNESS / 2 - rows[i].height / 2;\n        rowsPos.push({\n            x: spacePosX - column.width / 2,\n            y: backPosY,\n            z: totalDepth / 2 + delta,\n            height: rows[i].height\n        });\n    }\n    return {\n        position: new three__WEBPACK_IMPORTED_MODULE_1__.Vector3(spacePosX, legHeight + PLATE_THICKNESS + delta, totalDepth / 2 + delta),\n        rows: rowsPos\n    };\n}\nconst getLayoutImages = (param)=>{\n    let { totalHeight } = param;\n    let imgsArray = [];\n    if (totalHeight < 0.53) {\n        imgsArray = [\n            ...layout53Icons\n        ];\n    } else if (totalHeight < 0.63) {\n        imgsArray = [\n            ...layout63Icons\n        ];\n    } else if (totalHeight < 0.73) {\n        imgsArray = [\n            ...layout73Icons\n        ];\n    } else if (totalHeight < 0.93) {\n        imgsArray = [\n            ...layout93Icons\n        ];\n    } else if (totalHeight < 1.03) {\n        imgsArray = [\n            ...layout103Icons\n        ];\n    } else if (totalHeight < 1.23) {\n        imgsArray = [\n            ...layout123Icons\n        ];\n    } else if (totalHeight < 1.33) {\n        imgsArray = [\n            ...layout133Icons\n        ];\n    } else {\n        imgsArray = [\n            ...layout143Icons\n        ];\n    }\n    return imgsArray;\n};\nconst getId = (item)=>\"\".concat(item, \"-\").concat(Math.random().toString(32).slice(-4));\nconst createColumnWithLayout = (columnWidth, posX, totalHeight, legHeight, cabinetStyle)=>{\n    // Calculate the cabinet height (excluding legs and plate thickness)\n    const cabinetHeight = totalHeight - legHeight - 2 * PLATE_THICKNESS;\n    // Get the basic vertical layout for the column\n    const rows = getColumnVerticalLayout({\n        cabinetHeight\n    });\n    // Get the starting position Y coordinate\n    const startPosY = legHeight + PLATE_THICKNESS;\n    // Default to an empty layout (will be populated based on style)\n    let layoutIndex = 0;\n    let doors = [];\n    let drawers = [];\n    // Based on cabinet style, choose an appropriate layout\n    switch(cabinetStyle){\n        case \"modern\":\n            // For modern style, use all drawers\n            layoutIndex = 1;\n            // Create a drawer for each row\n            drawers = rows.map((row, index)=>({\n                    index,\n                    size: {\n                        width: columnWidth,\n                        height: row.height\n                    },\n                    pos: {\n                        x: posX,\n                        y: startPosY + (index + 0.5) * row.height + index * PLATE_THICKNESS\n                    }\n                }));\n            break;\n        case \"classic\":\n        default:\n            // For classic style, use doors for all rows\n            layoutIndex = 0;\n            // Create a door for the full height\n            doors = [\n                {\n                    index: 0,\n                    size: {\n                        width: columnWidth,\n                        height: cabinetHeight\n                    },\n                    pos: {\n                        x: posX,\n                        y: startPosY + cabinetHeight / 2\n                    },\n                    opening: 1\n                }\n            ];\n            break;\n    }\n    // Create and return the column object\n    return {\n        id: Math.random().toString(36).substr(2, 9),\n        index: 0,\n        width: columnWidth,\n        posX: posX,\n        rows: rows,\n        doors: doors,\n        drawers: drawers,\n        dividers: [],\n        layoutIndex: layoutIndex,\n        isDivide: false,\n        lastRow: drawers.length > 0 ? \"drawer\" : \"door\"\n    };\n};\n// Update the cabinet size constraints\nconst CABINET_SIZE_CONSTRAINTS = {\n    minWidth: 0.4,\n    maxWidth: 2.5,\n    minHeight: 0.4,\n    maxHeight: 2.4,\n    minDepth: 0.3,\n    maxDepth: 0.8\n};\nconst applyRandomLayoutsToColumns = (columns, totalHeight, legHeight)=>{\n    const startPosY = legHeight + PLATE_THICKNESS;\n    return columns.map((column)=>{\n        // Get all available layout options for this column\n        const layoutOptions = (0,_columnLayoutOptions__WEBPACK_IMPORTED_MODULE_0__.getLayoutOptionsOfColumn)({\n            totalHeight,\n            legHeight,\n            columnWidth: column.width,\n            posX: column.posX,\n            startPosY,\n            doorDir: 1 // Default door opening direction\n        });\n        // Select a random layout option\n        const randomLayoutIndex = Math.floor(Math.random() * layoutOptions.length);\n        const randomLayout = layoutOptions[randomLayoutIndex];\n        // Apply the random layout to the column\n        return {\n            ...column,\n            layoutIndex: randomLayoutIndex,\n            rows: randomLayout.rows,\n            doors: randomLayout.doors,\n            drawers: randomLayout.drawers,\n            lastRow: randomLayout.lastRow\n        };\n    });\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/utilities.ts\n"));

/***/ })

});